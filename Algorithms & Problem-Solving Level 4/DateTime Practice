#pragma once
#pragma warning(disable : 4996)

#include <iostream>
#include <string>
#include <iomanip>

using namespace std;

namespace MyDate {

	enum enCompareDates { Before = -1, Equals = 0, After = 1 };

	enum enDateFormat { Format1, Format2, Format3, Format4, Format5, Format6 };

	struct stDate {

		short Year = 0, Month = 0, Day = 0;

	};

	struct stPeriod {


		stDate StartDate, EndDate;


	};

	short ReadYear() {

		short Year = 0;
		cout << "\nPlease enter a Year? ";
		cin >> Year;
		return Year;

	}

	short ReadMonth() {

		short Month = 0;
		cout << "\nPlease enter a Month? ";
		cin >> Month;
		return Month;

	}

	short ReadDay() {

		short Day = 0;
		cout << "\nEnter a Day? ";
		cin >> Day;
		return Day;


	}

	stDate ReadFullDate() {

		stDate Date;
		Date.Day = ReadDay();
		Date.Month = ReadMonth();
		Date.Year = ReadYear();

		return Date;

	}

	string ReadStringDate() {
	
		string sDate = "";
		cout << "\nPlease enter Date dd/mm/yyyy ? ";
		getline(cin >> ws, sDate);
		return sDate;
	
	}

	stPeriod ReadPeriod() {
	
		stPeriod Period;
		cout << "\nEnter Start Date\n";
		Period.StartDate = ReadFullDate();
		cout << "\nEnter End Date\n";
		Period.EndDate = ReadFullDate();
		return Period;
	}

	string NumberToText(int Number) {


		if (Number == 0)
		{
			return "";
		}


		if (Number >= 1 && Number <= 19)
		{
			string arr[] = { ""," One"," Two"," Three"," Four"," Five"," Six"," Seven"," Eight", " Nine"," Ten"
				," Eleve"," Twelve"," Thirteen"," Fourteen"," Sixteen"," Seveteen"," Eighteen"," Ninteen" };
			return arr[Number];
		}
		else if (Number >= 20 && Number <= 99)
		{
			string arr[] = { "",""," Twenty"," Thity"," Fourty"," Fifty"," Sixty"," Seventy"," Eighty"," Ninty" };
			return arr[Number / 10] + NumberToText(Number % 10);
		}
		else if (Number >= 100 && Number <= 999)
		{

			if (Number / 100 > 1)
			{
				return NumberToText(Number / 100) + " Hundreds" + NumberToText(Number % 100);
			}
			else
			{
				return NumberToText(Number / 100) + " Hundred" + NumberToText(Number % 100);
			}
		}
		else if (Number >= 1000 && Number <= 99999)
		{

			if (Number / 1000 > 1)
			{
				return NumberToText(Number / 1000) + " Thousands" + NumberToText(Number % 1000);
			}
			else
			{
				return NumberToText(Number / 1000) + " Thousand" + NumberToText(Number % 1000);
			}
		}
		else if (Number >= 100000 && Number <= 999999)
		{

			if (Number / 100000 > 1)
			{
				return NumberToText(Number / 1000) + " Thousands" + NumberToText(Number % 1000);
			}
			else
			{
				return NumberToText(Number / 1000) + " Thousand" + NumberToText(Number % 1000);
			}
		}
		else if (Number >= 1000000 && Number <= 99999999)
		{

			if (Number / 1000000 > 1)
			{
				return NumberToText(Number / 1000000) + " Millions" + NumberToText(Number % 1000000);
			}
			else
			{
				return NumberToText(Number / 1000000) + " Million" + NumberToText(Number % 1000000);
			}
		}
		else if (Number >= 100000000 && Number <= 999999999)
		{

			if (Number / 100000000 > 1)
			{
				return NumberToText(Number / 1000000) + " Millions" + NumberToText(Number % 1000000);
			}
			else
			{
				return NumberToText(Number / 1000000) + " Million" + NumberToText(Number % 1000000);
			}
		}
		else
		{

			if (Number / 1000000000 > 1)
			{
				return NumberToText(Number / 1000000000) + " Billions" + NumberToText(Number % 1000000000);
			}
			else
			{
				return NumberToText(Number / 1000000000) + " Billion" + NumberToText(Number % 1000000000);
			}
		}






	}

	bool isLeapYear(short Year) {

		return (Year % 400 == 0 || (Year % 4 == 0 && Year % 100 != 0));

	}

	short DaysInYear(short Year) {

		return isLeapYear(Year) ? 366 : 365;


	}

	int HoursInYear(short Year) {

		return 24 * DaysInYear(Year);



	}

	int MinutesInYear(short Year) {

		return 60 * HoursInYear(Year);


	}

	int SecondsInYear(short Year) {

		return 60 * MinutesInYear(Year);


	}

	void PrintDaysHoursMinutesAndSecondsInYear(short Year) {

		cout << "Number Of Days    In Year [" << Year << "] : " << DaysInYear(Year) << endl;
		cout << "Number Of Hours   In Year [" << Year << "] : " << HoursInYear(Year) << endl;
		cout << "Number Of Minutes In Year [" << Year << "] : " << MinutesInYear(Year) << endl;
		cout << "Number Of Seconds In Year [" << Year << "] : " << SecondsInYear(Year) << endl;


	}

	short DaysInMonth(short Year, short Month) {

		if (Month < 1 || Month>12)
		{
			return 0;
		}

		short NumberOfDays[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

		return Month == 2 ? (isLeapYear(Year) ? 29 : 28) : NumberOfDays[Month - 1];


	}

	short HoursInMonth(short Year, short Month) {

		return DaysInMonth(Year, Month) * 24;

	}

	int MinutesInMonth(short Year, short Month) {

		return HoursInMonth(Year, Month) * 60;


	}

	int SecondsInMonth(short Year, short Month) {

		return MinutesInMonth(Year, Month) * 60;


	}

	void PrintDaysHoursMinutesAndSecondsInMonth(short Year, short Month) {

		cout << "Number Of Days    In Month [" << Month << "] : " << DaysInMonth(Year, Month) << endl;
		cout << "Number Of Hours   In Month [" << Month << "] : " << HoursInMonth(Year, Month) << endl;
		cout << "Number Of Minutes In Month [" << Month << "] : " << MinutesInMonth(Year, Month) << endl;
		cout << "Number Of Seconds In Month [" << Month << "] : " << SecondsInMonth(Year, Month) << endl;


	}

	short DayOrderInWeek(short Year, short Month, short Day) {

		short a = (14 - Month) / 12;
		short y = Year - a;
		short m = Month + (12 * a) - 2;
		return (Day + y + (y / 4) - (y / 100) + (y / 400) + (31 * m / 12)) % 7;

	}

	short DayOrderInWeek(stDate Date) {

		return DayOrderInWeek(Date.Year, Date.Month, Date.Day);

	}

	string ShortDayName(short DayOrder) {

		string arrDayOrder[] = { "Sunday","Monday","Tuseday","Wedensday","Thursday","Friday","Saturday" };
		return arrDayOrder[DayOrder];


	}

	string ShortMonthName(short Month) {

		string arrMonthName[] = { "Jan","Feb","March","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec" };
		return arrMonthName[Month - 1];


	}

	void PrintDayOrderInWeek(short Year, short Month, short Day, short DayOrder) {


		cout << "\nDate : " << Day << "/" << Month << "/" << Year << endl;
		cout << "Day Order : " << DayOrder << endl;
		cout << "Day Name : " << ShortDayName(DayOrder) << endl;


	}

	void PrintMonthCalinder(short Year, short Month) {

		short Current = 0;

		Current = DayOrderInWeek(Year, Month, 1);

		short NumberOfDays = DaysInMonth(Year, Month);

		cout << "\n  ----------------" << ShortMonthName(Month) << "-----------------\n\n";
		cout << "  Sun  Mon  Tue  Wed  Thu  Fri  Sat\n";

		short i = 0;

		for (i = 0; i < Current; i++)
		{
			printf("     ");
		}
		for (int j = 1; j <= NumberOfDays; j++)
		{
			printf("%5d", j);

			if (++i == 7)
			{
				cout << endl;
				i = 0;
			}

		}
		cout << "\n  ---------------------------------\n";
	}

	void PrintYearCalinder(short Year) {

		printf("\n  ---------------------------------\n");
		printf("\n             Calinder _ %d         \n", Year);
		printf("\n  ---------------------------------\n");

		for (short Month = 1; Month <= 12; ++Month)
		{
			PrintMonthCalinder(Year, Month);
		}

	}

	short NumberOfDaysFromTheBeggeningOfTheYear(short Year, short Month, short Day) {

		short TotalDays = 0;

		for (short NumOfMonth = 1; NumOfMonth < Month; ++NumOfMonth)
		{
			TotalDays += DaysInMonth(Year, NumOfMonth);
		}
		TotalDays += Day;

		return TotalDays;

	}

	stDate GetDateUsingNumberOfDaysFromTheBeggeningOfTheYear(short Year, short NumberOfDays) {


		stDate Date;
		Date.Month = 1;

		short DaysInMon = DaysInMonth(Year, Date.Month);

		while (NumberOfDays > DaysInMon)
		{
			NumberOfDays -= DaysInMon;
			Date.Month++;
			DaysInMon = DaysInMonth(Year, Date.Month);
		}
		Date.Day = NumberOfDays;
		Date.Year = Year;

		return Date;

	}

	void PrintDate(stDate Date) {

		cout << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	}

	stDate AddDaysToDate(stDate OriginalDate, short DaysToAdd) {

		stDate NewDate;
		NewDate.Year = OriginalDate.Year;
		short NumberOfDaysInOriginalDatePlusDaysToAdd = NumberOfDaysFromTheBeggeningOfTheYear(OriginalDate.Year, OriginalDate.Month, OriginalDate.Day)
			+ DaysToAdd;

		while (true)
		{

			if (isLeapYear(NewDate.Year))

			{
				if (NumberOfDaysInOriginalDatePlusDaysToAdd > 366)
				{
					NumberOfDaysInOriginalDatePlusDaysToAdd -= 366;
					NewDate.Year++;
				}
				else
				{
					NewDate = GetDateUsingNumberOfDaysFromTheBeggeningOfTheYear(NewDate.Year, NumberOfDaysInOriginalDatePlusDaysToAdd);
					break;
				}
			}
			else
			{

				if (NumberOfDaysInOriginalDatePlusDaysToAdd > 365)
				{
					NumberOfDaysInOriginalDatePlusDaysToAdd -= 365;
					NewDate.Year++;
				}
				else
				{
					NewDate = GetDateUsingNumberOfDaysFromTheBeggeningOfTheYear(NewDate.Year, NumberOfDaysInOriginalDatePlusDaysToAdd);
					break;
				}
			}

		}
		return NewDate;


	}

	bool isDate1BeforeDate2(stDate Date1, stDate Date2) {

		return (Date1.Year < Date2.Year) ? true : (Date1.Year > Date2.Year) ? false : (Date1.Month < Date2.Month) ? true : (Date1.Month > Date2.Month) ?
			false : (Date1.Day < Date2.Day);


	}

	bool isDate1EqualsDate2(stDate Date1, stDate Date2) {

		return !(Date1.Year == Date2.Year) ? false : !(Date1.Month == Date2.Month) ? false : Date1.Day == Date2.Day;

	}

	bool isLastDayInMonth(stDate Date) {

		return Date.Day == DaysInMonth(Date.Year, Date.Month) ? true : false;



	}

	bool isLastMonthInYear(short Month) {

		return Month == 12;

	}

	stDate IncreaseDateByOneDay(stDate Date) {

		if (isLastDayInMonth(Date))
		{
			if (isLastMonthInYear(Date.Month))
			{
				Date.Year++;
				Date.Month = 1;
				Date.Day = 1;
			}
			else
			{
				Date.Month++;
				Date.Day = 1;
			}
		}
		else
		{
			Date.Day++;
		}
		return Date;
	}

	void SwapDates(stDate& Date1, stDate& Date2) {

		stDate TempDate;
		TempDate.Day = Date1.Day;
		TempDate.Month = Date1.Month;
		TempDate.Year = Date1.Year;

		Date1.Day = Date2.Day;
		Date1.Month = Date2.Month;
		Date1.Year = Date2.Year;

		Date2.Day = TempDate.Day;
		Date2.Month = TempDate.Month;
		Date2.Year = TempDate.Year;




	}

	int DiferienceBetweenTwoDates(stDate Date1, stDate Date2, bool IncludedEndDay = false) {

		//My Solution.
		//حلي مش دقيق
		/*if (isDate1BeforeDate2(Date1, Date2))
		{
			short NumOfDays1 = NumberOfDaysFromTheBeggeningOfTheYear(Date1.Year, Date1.Month, Date1.Days);
			short NumOfDays2 = NumberOfDaysFromTheBeggeningOfTheYear(Date2.Year, Date2.Month, Date2.Days);

			short DaysDiferience = NumOfDays2 - NumOfDays1;
			short YearsDiferience = Date2.Year - Date1.Year;

			while (true)
			{
				if (Date1.Year!= Date2.Year)
				{
					DaysDiferience += 365;
					Date1.Year++;
				}
				else
				{
					break;
				}
			}
			return IncludedEndDay ? ++DaysDiferience : DaysDiferience;
		}
		else
		{
			return -1 * DiferienceBetweenTwoDates(Date2, Date1, IncludedEndDay);
		}*/

		//حل الاستاذ
		//Not The Best Solution
		int Days = 0;
		short SwapFlagValue = 1;
		if (!isDate1BeforeDate2(Date1, Date2))
		{
			SwapDates(Date1, Date2);
			SwapFlagValue = -1;
		}
		while (isDate1BeforeDate2(Date1, Date2))
		{
			Days++;
			Date1 = IncreaseDateByOneDay(Date1);
		}
		return IncludedEndDay ? ++Days * SwapFlagValue : Days * SwapFlagValue;
	}

	int PeriodLengthInDays(stPeriod Period, bool IncludedEndDay = false) {
	
		return DiferienceBetweenTwoDates(Period.StartDate, Period.EndDate, IncludedEndDay);
	
	}

	stDate GetSystemDate() {
		stDate Date;

		time_t t = time(0);
		tm* now = localtime(&t);

		Date.Year = now->tm_year + 1900;
		Date.Month = now->tm_mon + 1;
		Date.Day = now->tm_mday;

		return Date;
	}

	stDate IncreaseDateByXDays(stDate Date, short DaysToAdd) {


		for (short i = 0; i < DaysToAdd; i++)
		{
			Date = IncreaseDateByOneDay(Date);
		}
		return Date;

	}

	stDate IncreaseDateByOneWeek(stDate Date) {

		return Date = IncreaseDateByXDays(Date, 7);


	}

	stDate IncreaseDateByXWeeks(stDate Date, short WeeksToAdd) {

		for (short i = 0; i < WeeksToAdd; i++)
		{
			Date = IncreaseDateByOneWeek(Date);
		}
		return Date;

	}

	stDate IncreaseDateByOneMonth(stDate Date) {

		if (Date.Month == 12)
		{
			Date.Month = 1;
			Date.Year++;
		}
		else
		{
			Date.Month++;
		}
		short NumberOfDaysInCurrentMonth = DaysInMonth(Date.Year, Date.Month);
		if (Date.Day > NumberOfDaysInCurrentMonth)
		{
			Date.Day = NumberOfDaysInCurrentMonth;
		}
		return Date;
	}

	stDate IncreaseDateByXMonths(stDate Date, short MonthsToAdd) {

		for (short i = 0; i < MonthsToAdd; i++)
		{
			Date = IncreaseDateByOneMonth(Date);
		}
		return Date;
	}

	stDate IncreaseDateByOneYear(stDate Date) {

		Date.Year++;
		return Date;

	}

	stDate IncreaseDateByXYears(stDate Date, short YearsToAdd) {

		for (short i = 0; i < YearsToAdd; i++)
		{
			Date = IncreaseDateByOneYear(Date);
		}
		return Date;

	}

	stDate IncreaseDateByXYearsFaster(stDate Date, short YearsToAdd) {

		Date.Year += YearsToAdd;
		return Date;

	}

	stDate IncreaseDateByOneDecade(stDate Date) {

		Date.Year += 10;
		return Date;
	}

	stDate IncreaseDateByXDecades(stDate Date, short DecadesToAdd) {

		for (short i = 0; i < DecadesToAdd; i++)
		{
			Date = IncreaseDateByOneDecade(Date);
		}
		return Date;

	}

	stDate IncreaseDateByXDecadesFaster(stDate Date, short DecadesToAdd) {

		Date.Year += (DecadesToAdd * 10);
		return Date;

	}

	stDate IncreaseDateByOneCentury(stDate Date) {

		Date.Year += 100;
		return Date;

	}

	stDate IncreaseDateByOneMillenium(stDate Date) {


		Date.Year += 1000;

		return Date;
	}

	stDate DecreaseDateByOneDay(stDate Date) {

		if (Date.Day == 1)
		{
			if (Date.Month == 1)
			{
				Date.Day = 31;
				Date.Month = 12;
				--Date.Year;
			}
			else
			{
				Date.Day = DaysInMonth(Date.Year, --Date.Month);
			}
		}
		else
		{
			--Date.Day;
		}
		return Date;
	}

	stDate DecreaseDateByXDays(stDate Date, short DaysToSub) {

		for (short i = 0; i < DaysToSub; i++)
		{
			Date = DecreaseDateByOneDay(Date);
		}
		return Date;

	}

	stDate DecreaseDateByOneWeek(stDate Date) {


		for (short i = 0; i < 7; i++)
		{
			Date = DecreaseDateByOneDay(Date);
		}
		return Date;

	}

	stDate DecreaseDateByXWeeks(stDate Date, short WeeksToSub) {


		for (short i = 0; i < WeeksToSub; i++)
		{
			Date = DecreaseDateByOneWeek(Date);
		}
		return Date;

	}

	stDate DecreaseDateByOneMonth(stDate Date) {

		if (Date.Month == 1)
		{
			Date.Month = 12;
			--Date.Year;
		}
		else
		{
			Date.Month--;
		}
		short NumberOfDaysInCurrentMonth = DaysInMonth(Date.Year, Date.Month);
		if (Date.Day > NumberOfDaysInCurrentMonth)
		{
			Date.Day = NumberOfDaysInCurrentMonth;
		}
		return Date;

	}

	stDate DecreaseDateByXMonths(stDate Date, short MonthsToSub) {

		for (short i = 0; i < MonthsToSub; i++)
		{
			Date = DecreaseDateByOneMonth(Date);
		}
		return Date;

	}

	stDate DecreaseDateByOneYear(stDate Date) {

		Date.Year--;
		return Date;

	}

	stDate DecreaseDateByXYears(stDate Date, short YearsToSub) {

		for (short i = 0; i < YearsToSub; ++i)
		{
			Date = DecreaseDateByOneYear(Date);
		}
		return Date;

	}

	stDate DecreaseDateByXYearsFaster(stDate Date, short YearsToSub) {

		Date.Year -= YearsToSub;
		return Date;

	}

	stDate DecreaseDateByOneDecade(stDate Date) {

		Date.Year -= 10;
		return Date;

	}

	stDate DecreaseDateByXDecades(stDate Date, short DecadesToSub) {

		for (short i = 0; i < DecadesToSub; ++i)
		{
			Date = DecreaseDateByOneDecade(Date);
		}
		return Date;

	}

	stDate DecreaseDateByXDecadesFaster(stDate Date, short DecadesToSub) {


		Date.Year -= DecadesToSub * 10;

		return Date;

	}

	stDate DecreaseDateByOneCentury(stDate Date) {

		Date.Year -= 100;
		return Date;

	}

	stDate DecreaseDateByOneMillenium(stDate Date) {


		Date.Year -= 1000;

		return Date;
	}

	bool isEndOfWeek(stDate Date) {

		return DayOrderInWeek(Date) == 6;

	}

	bool isWeekend(stDate Date) {

		return DayOrderInWeek(Date) == 5 || DayOrderInWeek(Date) == 6;

	}

	bool isBusinessDay(stDate Date) {

		return !isWeekend(Date);

	}

	short DaysUntilTheEndOfWeek(stDate Date) {

		return 6 - DayOrderInWeek(Date);

	}

	short DaysUntilTheEndOfMonth(stDate Date) {

		stDate EndOfMonthDate;


		EndOfMonthDate.Day = DaysInMonth(Date.Year, Date.Month);
		EndOfMonthDate.Month = Date.Month;
		EndOfMonthDate.Year = Date.Year;

		return DiferienceBetweenTwoDates(Date, EndOfMonthDate, true);
	}

	short DaysUntilTheEndOfYear(stDate Date) {

		stDate EndOfYearDate;

		EndOfYearDate.Day = 31;
		EndOfYearDate.Month = 12;
		EndOfYearDate.Year = Date.Year;

		return DiferienceBetweenTwoDates(Date, EndOfYearDate, true);



	}

	short CalculateVacationDays(stDate VacationStartsDate,stDate VacationEndDate) {
	
		short VacationDays = 0;
		while (isDate1BeforeDate2(VacationStartsDate, VacationEndDate))
		{
			if (isBusinessDay(VacationStartsDate))
				VacationDays++;

				VacationStartsDate = IncreaseDateByOneDay(VacationStartsDate);
		
		}
		return VacationDays;
	
	}

	stDate CalculateVacationDaysReturnDate(stDate VacationStartsDate, short VacationDays) {

		while (VacationDays != 0)
		{
			if (isBusinessDay(VacationStartsDate))
				VacationDays--;

			VacationStartsDate = IncreaseDateByOneDay(VacationStartsDate);
		}
		return VacationStartsDate;

	}

	bool isDate1AfterDate2(stDate Date1,stDate Date2) {
	
		return !isDate1BeforeDate2(Date1, Date2) && !isDate1EqualsDate2(Date1, Date2);
	
	
	}

	enCompareDates CompareDates(stDate Date1,stDate Date2) {

		return isDate1BeforeDate2(Date1, Date2) ? enCompareDates::Before : isDate1AfterDate2(Date1, Date2) ? enCompareDates::After : enCompareDates::Equals;

	}

	bool isOverLapPeriods(stPeriod Period1,stPeriod Period2) {
	
		if (CompareDates(Period1.EndDate, Period2.StartDate)==enCompareDates::Before
			||
			CompareDates(Period2.EndDate, Period1.StartDate)==enCompareDates::Before)
			return false;
		else
			return true;
	
	}

	bool isDateInPeriod(stPeriod Period, stDate Date) {
	
		return !(CompareDates(Date, Period.StartDate) == enCompareDates::Before || CompareDates(Date, Period.EndDate) == enCompareDates::After
			||(CompareDates(Date,Period.StartDate)==enCompareDates::Equals|| CompareDates(Date, Period.EndDate) == enCompareDates::Equals));
	
	}

	int GetOverLapInDays(stPeriod Period1,stPeriod Period2) {
	
		//My Solution I think its Very Good
		/*if (!isOverLapPeriods(Period1, Period2))
		{
			return 0;
		}
		if (isDateInPeriod(Period1, Period2.StartDate))
		{
			if (isDateInPeriod(Period1, Period2.EndDate))
			{
				return PeriodLengthInDays(Period2, true);
			}
			else
			{
				return DiferienceBetweenTwoDates(Period2.StartDate, Period1.EndDate,true);
			}
		}
		else
		{
			if (isDateInPeriod(Period2, Period1.EndDate))
			{
				return PeriodLengthInDays(Period1, true);
			}
			else
			{
				return DiferienceBetweenTwoDates(Period1.StartDate, Period2.EndDate,true);
			}
		}*/
	//Eng.Mohammed Solution:
		if (!isOverLapPeriods(Period1, Period2))
		{
			return 0;
		}
		int Period1Length = PeriodLengthInDays(Period1,true);
		int Period2Length = PeriodLengthInDays(Period2,true);
		int OverLapDays = 0;
		if (Period1Length < Period2Length)
		{
			while (isDate1BeforeDate2(Period1.StartDate, Period1.EndDate))
			{
				if (isDateInPeriod(Period2, Period1.StartDate))
					OverLapDays++;

				Period1.StartDate = IncreaseDateByOneDay(Period1.StartDate);
				
			}
		}
		else
		{
			while (isDate1BeforeDate2(Period2.StartDate, Period2.EndDate))
			{
				if (isDateInPeriod(Period1, Period2.StartDate))
					OverLapDays++;

				Period2.StartDate = IncreaseDateByOneDay(Period2.StartDate);

			}
		}
		return OverLapDays;
	}

	bool isValidDate(stDate Date) {
	
		if ( (Date.Month < 1 || Date.Month > 12) || (Date.Day < 1 || Date.Day > 31) )
		{
			return false;
		}
		short NumberOfDaysInMonth = DaysInMonth(Date.Year, Date.Month);
		return Date.Day <= NumberOfDaysInMonth;
	}

	vector<string>SplitString(string str, string Dilem) {

		vector<string>vString;
		string sWord = "";
		int pos = 0;

		while ((pos = str.find(Dilem)) != std::string::npos)//use find function to store space pos in pos variable //will not enter loop if not find space(delim)
		{
			sWord = str.substr(0, pos);
			if (sWord != "")
			{
				vString.push_back(sWord);
			}
			str.erase(0, pos + Dilem.length());//will delete from start of string to pos+space
		}
		if (str != "")//will print the last word in string because there is not found delim after it
		{
			vString.push_back(str);
		}
		return vString;

	}

	string LowerCaseAllLetterInString(string str) {




		for (int i = 0; i < str.length(); i++)
		{


			if (str.at(i) != ' ')
			{
				str.at(i) = tolower(str.at(i));
			}

		}
		return str;

	}

	stDate SplitDateString(string sDate) {
	
		vector<string>vDate=SplitString(sDate,"/");
		stDate Date;
		Date.Day = stoi(vDate[0]);
		Date.Month = stoi(vDate[1]);
		Date.Year = stoi(vDate[2]);

		return Date;
	}

	string JoinDateString(stDate Date,string Sperator="/") {
	
	
		string sDate = to_string(Date.Day) + Sperator;
		sDate += to_string(Date.Month) + Sperator;
		sDate += to_string(Date.Year);

		return sDate;
	}

	string ReplaceWordsInString(string str, string WordReplaced, string WordInserted) {



		short pos1 = 0;
		while ((pos1 = str.find(WordReplaced)) != std::string::npos)
		{

			str = str.replace(pos1, WordReplaced.length(), WordInserted);
			pos1 = str.find(WordReplaced);
		}
		return str;
	}

	string FormatDate(stDate Date, string Format = "dd/mm/yyyy") {
	
		string FormatedDate = ReplaceWordsInString(Format, "dd", to_string(Date.Day));
		FormatedDate= ReplaceWordsInString(FormatedDate, "mm", to_string(Date.Month));
		FormatedDate = ReplaceWordsInString(FormatedDate, "yyyy", to_string(Date.Year));
		return FormatedDate;
}

	}
	
